package My_Theory_Summery;

public class Class_Theory {
//    Java에서는 일반 클래스, 헬퍼 클래스, 인터페이스, 추상 클래스 등 다양한 클래스를 사용합니다.
//
//            1.일반 클래스 (Regular Class)
//    객체를 생성하기 위한 일반적인 클래스입니다.
//    클래스의 필드와 메소드를 가지며, 인스턴스화해서 사용할 수 있습니다.
//    상속 받은 메소드나 필드를 자유롭게 오버라이딩해서 사용할 수 있습니다.
//            2.헬퍼 클래스 (Helper Class)
//    특정 기능을 수행하는 데 도움을 주는 클래스입니다.
//    주로 다른 클래스에서 호출되는 메소드를 가지며, 객체를 생성하지 않고 정적(static) 메소드를 사용할 수 있습니다.
//    유틸리티 클래스나 라이브러리 클래스가 해당됩니다.
//            3.인터페이스 (Interface)
//    구현체를 강제하기 위한 클래스의 일종입니다.
//    메소드 시그니처를 정의하기만 하며, 구현체에서는 이를 반드시 구현해야 합니다.
//    다중 상속이 가능하며, 다형성을 지원합니다.
//            4.추상 클래스 (Abstract Class)
//    인스턴스를 생성할 수 없는 클래스입니다.
//    추상 메소드를 포함할 수 있으며, 이를 상속 받은 클래스에서 반드시 구현해야 합니다.
//    일반적인 클래스와 마찬가지로 필드와 메소드를 가질 수 있습니다.
//    각 클래스들의 차이점을 요약하자면,
//
//    일반 클래스와 추상 클래스는 객체를 생성하여 사용할 수 있고, 추상 클래스는 추상 메소드를 가질 수 있습니다.
//    헬퍼 클래스는 객체 생성 없이 사용할 수 있는 정적 메소드를 가집니다.
//    인터페이스는 구현체가 반드시 구현해야 하는 메소드 시그니처를 가집니다
}
